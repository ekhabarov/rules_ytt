"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//ytt/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//ytt/private:versions.bzl", "YTT_VERSIONS")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
# This is all fixed by bzlmod, so we just tolerate it for now.
def rules_ytt_dependencies():
    pass

def rules_ytt_internal_dependencies():
    pass

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for ytt toolchain"
_ATTRS = {
    "ytt_version": attr.string(mandatory = True, values = YTT_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

_YTT_BUILD_TPL = """\
#Generated by ytt/repositories.bzl
load("@rules_ytt//ytt:toolchains.bzl", "ytt_toolchain")

ytt_toolchain(
    name = "ytt_toolchain",
    ytt = select({
        "@bazel_tools//src/conditions:host_windows": "ytt.exe",
        "//conditions:default": "ytt",
    }),
    version = "%s",
)
"""

def _ytt_repo_impl(rctx):
    url = "https://github.com/carvel-dev/ytt/releases/download/v{version}/ytt-{platform}".format(
        version = rctx.attr.ytt_version,
        platform = rctx.attr.platform.replace("_", "-"),
    )

    rctx.download(
        url = url,
        output = "ytt",
        integrity = YTT_VERSIONS[rctx.attr.ytt_version][rctx.attr.platform],
        executable = True,
    )

    # Base BUILD file for this repository
    rctx.file("BUILD.bazel", _YTT_BUILD_TPL % rctx.attr.ytt_version)

ytt_repositories = repository_rule(
    _ytt_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def ytt_register_toolchains(name = "ytt", version = "0.46.2", register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "ytt_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - create a repository exposing toolchains for each platform like "ytt_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "ytt1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each node_repositories call
    """
    for platform in PLATFORMS.keys():
        ytt_repositories(
            name = name + "_" + platform,
            platform = platform,
            ytt_version = version,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        ytt = name,
    )
